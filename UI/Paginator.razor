﻿<div class="d-flex align-items-center justify-content-center gap-3">
    <button class="btn btn-primary rounded-pill" disabled="@(CurrentPage <= 1)" @onclick="PrevPage">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
        </svg>
    </button>

    <span>Page @CurrentPage of @TotalPages</span>

    <button class="btn btn-primary rounded-pill" disabled="@(CurrentPage >= TotalPages)" @onclick="NextPage">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8" />
        </svg>
    </button>
</div>


@code {
    [Parameter]
    [EditorRequired]
    public int CurrentPage { get; set; }

    [Parameter]
    [EditorRequired]
    public int TotalPages { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await OnPageChange.InvokeAsync(CurrentPage);
        }
    }

    private async Task PrevPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await OnPageChange.InvokeAsync(CurrentPage);
        }
    }
}
